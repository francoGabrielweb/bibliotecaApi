server.port=8080

spring.datasource.url=jdbc:mysql://localhost:3306/libreria
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=none

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true





#
#Aquí tienes una lista de algunas de las anotaciones más utilizadas en el framework Spring y una breve descripción de su funcionalidad:
#
#@Controller: Esta anotación se utiliza para marcar una clase como controlador en el patrón MVC de Spring. Los controladores son responsables de manejar las solicitudes HTTP y producir una respuesta adecuada.
#
#@RestController: Similar a @Controller, pero específico para API RESTful. Esta anotación combina @Controller y @ResponseBody, lo que significa que los métodos del controlador devuelven directamente datos en lugar de vistas.
#
#@Service: Esta anotación se utiliza para marcar una clase como un componente de servicio en la capa de lógica de negocio. Los servicios realizan operaciones de negocio y coordinan la lógica entre los controladores y los repositorios.
#
#@Repository: Esta anotación se utiliza para marcar una clase como un componente de repositorio en la capa de acceso a datos. Los repositorios son responsables de interactuar con la base de datos o cualquier otra fuente de datos.
#
#@Autowired: Esta anotación se utiliza para inyectar automáticamente dependencias en una clase. Puede aplicarse a campos, constructores o métodos setter.
#
#@GetMapping, @PostMapping, @PutMapping, @DeleteMapping: Estas anotaciones se utilizan para mapear métodos de controlador a las operaciones HTTP GET, POST, PUT y DELETE, respectivamente. Especifican la URL del endpoint y la acción que se debe realizar.
#
#@PathVariable: Esta anotación se utiliza para mapear variables de la URL a parámetros de método en un controlador.
#
#@RequestBody: Esta anotación se utiliza para indicar que el cuerpo de la solicitud HTTP se debe convertir automáticamente a un objeto Java en un controlador.
#
#@ResponseBody: Esta anotación se utiliza para indicar que el valor de retorno de un método de controlador se debe convertir automáticamente a un formato adecuado para la respuesta HTTP.
#
#@Valid: Esta anotación se utiliza en combinación con la validación de bean de Java (javax.validation) para validar automáticamente los objetos recibidos en los controladores.
#
#Estas son solo algunas de las anotaciones más comunes en Spring. El framework Spring ofrece muchas otras anotaciones para diferentes casos de uso, como el manejo de transacciones (@Transactional), el control de cache (@Cacheable, @CacheEvict), la programación asíncrona (@Async), entre otras. La elección de las anotaciones a utilizar depende de los requerimientos y el contexto específico de tu aplicación.